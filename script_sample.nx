// // -----------------------------------------
// // Conditionals
// // -----------------------------------------
// let a = 123
// if a a = 321
// print a // 321

// let b = "Hi"
// if !b b = "?" else b = b + " Wrld"
// print b // "Hi Wrld"

// if a and b print "a and b is Truthy!"
// if a or b print "a or b is Truthy!"

// // -----------------------------------------
// // Loops
// // -----------------------------------------
// for let i = 0 ; i < 5 ; i = i + 1 {
//   print i
// }

// let b = false
// for b ; !b { // Incrementing is optional
//   print b
//   b = true
// }

// let c = 0
// while b {
//   c = c + 1
//   b = c < 10
//   print c
// }

// for let i = 0 ; i < 100 ; i = i + 1 {
//   let outer = fn -> {
//     let x = "outside"
//     let inner = fn -> {
//       print x
//     }
//     ret inner;
//   }

//   for let y = 0; y < 100; y = y + 1 {
//     let x = fn -> {
//       print "Hello World"
//     }
//     x()
//   }
//   let closure = outer()
//   closure()
//   print i
// }

// -----------------------------------------
// Functions
// -----------------------------------------
// let a = fn -> print "a" // Anonymous Fn
// let a_args = fn x,y,z -> print x + y + z // Anonymous Fn
// fn b -> print "b" // Named Fn
// fn b_args x,y,z -> print x + y + z // Named Fn

// print a
// print a_args
// print b
// print b_args

// // -----------------------------------------
// // Functions can be recursive
// // -----------------------------------------
// let fib = fn n ->
//   if n <= 1
//     ret n;
//   else
//     ret (fib(n-1) + fib(n-2));

// // With native functions. Here, timed with clock()
// let start = clock()
// print "Let's calculate fib(35)!"
// let result = fib(35)
// print clock() - start

// print result

// +---------------------------+------------------------------------------+--------+---------+-----------+
// | CHANGE                    | COMMIT HASH                              | FIB #  | t DEBUG | t RELEASE |
// +---------------------------+------------------------------------------+--------+---------+-----------+
// | After adding classes      | 03374177fea58b99ab4a1c47014aca8855a50485 | 35     | 6.732s  | 0.837s    |
// +---------------------------+------------------------------------------+--------+---------+-----------+

// // -----------------------------------------
// // Functions have / are Closures
// // -----------------------------------------
// fn outer -> {
//   let x = "outside"
//   let inner = fn -> {
//     print x
//   }
//   inner()
// }

// outer()
// fn closure -> outer()
// closure()

// // -----------------------------------------
// // Classes 
// // -----------------------------------------
// cls Scone {
//   fn topping = first, second -> {
//     print "scone with " + first + " and " + second
//     ret 1;
//   }
// }

// let scone = Scone()
// let res = scone.topping("berries", "cream")
// print res
// print scone.topping

// cls Nested {
//   fn method -> {
//     let function = fn -> {
//       print this
//     }

//     function()
//   }
// }

// Nested().method() // Prints "Nested Instance"

// cls CoffeeMaker {
//   ctor = coffee -> {
//     this.coffee = coffee
//   }

//   fn brew -> {
//     print "Enjoy your cup of " + this.coffee

//     // No reusing the grounds!
//     this.coffee = nil
//   }
// }

// let maker = CoffeeMaker("coffee and chicory")
// maker.brew() 
// // maker.brew() // Error

// // -----------------------------------------
// // Base Classes
// // -----------------------------------------
// cls A {
//   fn method -> {
//     print "A"
//   }
// }

// while false {
//   let a = nil
// }

// cls B : A {
//   fn method -> {
//     let closure = base.method
//     closure() // Prints "A"
//   }
// }

// let b = B()
// b.method()

// -----------------------------------------
// Benchmarks
// -----------------------------------------
cls Zoo {
  ctor -> {
    this.aardvark = 1
    this.baboon   = 1
    this.cat      = 1
    this.donkey   = 1
    this.elephant = 1
    this.fox      = 1
  }
  fn ant    -> { ret this.aardvark; }
  fn banana -> { ret this.baboon; }
  fn tuna   -> { ret this.cat; }
  fn hay    -> { ret this.donkey; }
  fn grass  -> { ret this.elephant; }
  fn mouse  -> { ret this.fox; }
}

let zoo = Zoo()
let sum = 0
let start = clock()

while (sum < 100000000) {
  sum = sum + zoo.ant()
            + zoo.banana()
            + zoo.tuna()
            + zoo.hay()
            + zoo.grass()
            + zoo.mouse()
}

print clock() - start
print sum
